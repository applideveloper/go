package main

import (
	"fmt"
	"math"
)

func Sqrt(x float64) float64 {
	z := 1.0
	for diff := 1.0; math.Abs(diff) > 1e-10; {
		diff = ((math.Pow(z, 2) - x) / (2.0 * x))
		z = z - diff
	}
	return z
}

func main() {
	fmt.Println(Sqrt(2))
	fmt.Println(math.Sqrt(2))
}

/*
Exercise: Loops and Functions

関数とループを使った簡単な練習として、 ニュートン法 を使った平方根の計算を実装してみましょう。

この問題では、ニュートン法は、 開始点 z を選び、以下の式を繰り返すことによって、 Sqrt(x) を近似します。


最初は、その計算式を10回だけ繰り返し、 x を(1, 2, 3, ...)と様々な値に対する結果がどれだけ正解値に近いかを確認してみてください。

次に、ループを回すときの直前に求めたzの値がこれ以上変化しなくなったとき （または、差がとても小さくなったとき） に停止するようにループを変更してみてください。 この変更により、ループ回数が多くなったか、少なくなったのか見てみてください。 math.Sqrt と比べてどれくらい近似できましたか？

ヒント：浮動小数点を宣言し、値を初期化するには、型のキャストか、浮動小数点を使ってください：

z := float64(1)
z := 1.0
*/
